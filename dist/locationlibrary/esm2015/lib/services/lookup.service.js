import { Injectable } from "@angular/core";
import { setting } from "../setting";
import { HttpCallServieService } from "./http-call-service.service";
import * as i0 from "@angular/core";
import * as i1 from "./http-call-service.service";
export class LookupService {
    constructor(_HttpCallServieService_) {
        this._HttpCallServieService_ = _HttpCallServieService_;
    }
    get() {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "GET",
            request_URI: "lookup",
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    getAll() {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "GET",
            request_URI: "lookup/all",
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    getOne(id) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "GET",
            request_URI: "lookup/" + id,
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    add(data) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "POST",
            request_URI: "lookup",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    update(data, id) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "PUT",
            request_URI: "lookup/" + id,
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    delete(id) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "DELETE",
            request_URI: "lookup/" + id,
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    search(data) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "POST",
            request_URI: "lookup/search",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    searchAll(data) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "POST",
            request_URI: "lookup/search/all",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    advancedSearch(data) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "POST",
            request_URI: "lookup/advancedsearch",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    advancedSearchAll(data) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "POST",
            request_URI: "lookup/advancedsearch/all",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    lookup(data) {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "POST",
            request_URI: "lookup/entity",
            request_BODY: JSON.stringify({ entityname: data })
        };
        return this._HttpCallServieService_.api(postData);
    }
    entityList() {
        var postData = {
            service_NAME: setting.service_NAME,
            request_TYPE: "GET",
            request_URI: "lookup/entitylist",
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
}
LookupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LookupService_Factory() { return new LookupService(i0.ɵɵinject(i1.HttpCallServieService)); }, token: LookupService, providedIn: "root" });
LookupService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
LookupService.ctorParameters = () => [
    { type: HttpCallServieService }
];
//# sourceMappingURL=data:application/json;base64,