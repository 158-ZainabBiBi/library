import { Injectable } from "@angular/core";
import { HttpcallService } from "../../services/httpcall.service";
import * as i0 from "@angular/core";
import * as i1 from "../../services/httpcall.service";
export class LocationService {
    constructor(_HttpcallService_) {
        this._HttpcallService_ = _HttpcallService_;
    }
    get() {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "GET",
            request_URI: "location",
            request_BODY: ""
        };
        return this._HttpcallService_.api(postData);
    }
    getAll() {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "GET",
            request_URI: "location/all",
            request_BODY: ""
        };
        return this._HttpcallService_.api(postData);
    }
    getOne(id) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "GET",
            request_URI: "location/" + id,
            request_BODY: ""
        };
        return this._HttpcallService_.api(postData);
    }
    add(data) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "POST",
            request_URI: "location",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpcallService_.api(postData);
    }
    update(data, id) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "PUT",
            request_URI: "location/" + id,
            request_BODY: JSON.stringify(data)
        };
        return this._HttpcallService_.api(postData);
    }
    delete(id) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "DELETE",
            request_URI: "location/" + id,
            request_BODY: ""
        };
        return this._HttpcallService_.api(postData);
    }
    search(data) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "POST",
            request_URI: "location/search",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpcallService_.api(postData);
    }
    searchAll(data) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "POST",
            request_URI: "location/search/all",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpcallService_.api(postData);
    }
    advancedSearch(data) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "POST",
            request_URI: "location/advancedsearch",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpcallService_.api(postData);
    }
    advancedSearchAll(data) {
        var postData = {
            service_NAME: "LOCATION",
            request_TYPE: "POST",
            request_URI: "location/advancedsearch/all",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpcallService_.api(postData);
    }
    getAllDetail(response) {
        for (var a = 0; a < response.length; a++) {
            response[a].locationleveltype = response[a].locationleveltype_ID.code + " - " + response[a].locationleveltype_ID.description;
        }
        return (response);
    }
    getDetail(response) {
        response.locationleveltype = response.locationleveltype_ID.code + " - " + response.locationleveltype_ID.description;
        if (response.isactive == "Y") {
            response.isactive = true;
        }
        else {
            response.isactive = false;
        }
        return (response);
    }
}
LocationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocationService_Factory() { return new LocationService(i0.ɵɵinject(i1.HttpcallService)); }, token: LocationService, providedIn: "root" });
LocationService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
LocationService.ctorParameters = () => [
    { type: HttpcallService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xvY2F0aW9ubGlicmFyeS9zcmMvbGliL2NvbXBvbmVudHMvbG9jYXRpb24vbG9jYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7O0FBS2xFLE1BQU0sT0FBTyxlQUFlO0lBRTFCLFlBQ1UsaUJBQWtDO1FBQWxDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBaUI7SUFDeEMsQ0FBQztJQUVMLEdBQUc7UUFDRCxJQUFJLFFBQVEsR0FBRztZQUNiLFlBQVksRUFBRSxVQUFVO1lBQ3hCLFlBQVksRUFBRSxLQUFLO1lBQ25CLFdBQVcsRUFBRSxVQUFVO1lBQ3ZCLFlBQVksRUFBRSxFQUFFO1NBQ2pCLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLFFBQVEsR0FBRztZQUNiLFlBQVksRUFBRSxVQUFVO1lBQ3hCLFlBQVksRUFBRSxLQUFLO1lBQ25CLFdBQVcsRUFBRSxjQUFjO1lBQzNCLFlBQVksRUFBRSxFQUFFO1NBQ2pCLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFFO1FBQ1AsSUFBSSxRQUFRLEdBQUc7WUFDYixZQUFZLEVBQUUsVUFBVTtZQUN4QixZQUFZLEVBQUUsS0FBSztZQUNuQixXQUFXLEVBQUUsV0FBVyxHQUFHLEVBQUU7WUFDN0IsWUFBWSxFQUFFLEVBQUU7U0FDakIsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFD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QUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDO1NBQzlIO1FBQ0QsT0FBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRCxTQUFTLENBQUMsUUFBUTtRQUNoQixRQUFRLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLElBQUksR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQztRQUNwSCxJQUFJLFFBQVEsQ0FBQyxRQUFRLElBQUksR0FBRyxFQUFFO1lBQzVCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQzFCO2FBQU07WUFDTCxRQUFRLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUMzQjtRQUNELE9BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQixDQUFDOzs7O1lBOUhGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBSlEsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBIdHRwY2FsbFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvaHR0cGNhbGwuc2VydmljZVwiO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46IFwicm9vdFwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2NhdGlvblNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX0h0dHBjYWxsU2VydmljZV86IEh0dHBjYWxsU2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIGdldCgpIHtcclxuICAgIHZhciBwb3N0RGF0YSA9IHtcclxuICAgICAgc2VydmljZV9OQU1FOiBcIkxPQ0FUSU9OXCIsXHJcbiAgICAgIHJlcXVlc3RfVFlQRTogXCJHRVRcIixcclxuICAgICAgcmVxdWVzdF9VUkk6IFwibG9jYXRpb25cIixcclxuICAgICAgcmVxdWVzdF9CT0RZOiBcIlwiXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fSHR0cGNhbGxTZXJ2aWNlXy5hcGkocG9zdERhdGEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxsKCkge1xyXG4gICAgdmFyIHBvc3REYXRhID0ge1xyXG4gICAgICBzZXJ2aWNlX05BTUU6IFwiTE9DQVRJT05cIixcclxuICAgICAgcmVxdWVzdF9UWVBFOiBcIkdFVFwiLFxyXG4gICAgICByZXF1ZXN0X1VSSTogXCJsb2NhdGlvbi9hbGxcIixcclxuICAgICAgcmVxdWVzdF9CT0RZOiBcIlwiXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fSHR0cGNhbGxTZXJ2aWNlXy5hcGkocG9zdERhdGEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0T25lKGlkKSB7XHJcbiAgICB2YXIgcG9zdERhdGEgPSB7XHJcbiAgICAgIHNlcnZpY2VfTkFNRTogXCJMT0NBVElPTlwiLFxyXG4gICAgICByZXF1ZXN0X1RZUEU6IFwiR0VUXCIsXHJcbiAgICAgIHJlcXVlc3RfVVJJOiBcImxvY2F0aW9uL1wiICsgaWQsXHJcbiAgICAgIHJlcXVlc3RfQk9EWTogXCJcIlxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX0h0dHBjYWxsU2VydmljZV8uYXBpKHBvc3REYXRhKTtcclxuICB9XHJcblxyXG4gIGFkZChkYXRhKSB7XHJcbiAgICB2YXIgcG9zdERhdGEgPSB7XHJcbiAgICAgIHNlcnZpY2VfTkFNRTogXCJMT0NBVElPTlwiLFxyXG4gICAgICByZXF1ZXN0X1RZUEU6IFwiUE9TVFwiLFxyXG4gICAgICByZXF1ZXN0X1VSSTogXCJsb2NhdGlvblwiLFxyXG4gICAgICByZXF1ZXN0X0JPRFk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fSHR0cGNhbGxTZXJ2aWNlXy5hcGkocG9zdERhdGEpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGRhdGEsIGlkKSB7XHJcbiAgICB2YXIgcG9zdERhdGEgPSB7XHJcbiAgICAgIHNlcnZpY2VfTkFNRTogXCJMT0NBVElPTlwiLFxyXG4gICAgICByZXF1ZXN0X1RZUEU6IFwiUFVUXCIsXHJcbiAgICAgIHJlcXVlc3RfVVJJOiBcImxvY2F0aW9uL1wiICsgaWQsXHJcbiAgICAgIHJlcXVlc3RfQk9EWTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fSHR0cGNhbGxTZXJ2aWNlXy5hcGkocG9zdERhdGEpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkKSB7XHJcbiAgICB2YXIgcG9zdERhdGEgPSB7XHJcbiAgICAgIHNlcnZpY2VfTkFNRTogXCJMT0NBVElPTlwiLFxyXG4gICAgICByZXF1ZXN0X1RZUEU6IFwiREVMRVRFXCIsXHJcbiAgICAgIHJlcXVlc3RfVVJJOiBcImxvY2F0aW9uL1wiICsgaWQsXHJcbiAgICAgIHJlcXVlc3RfQk9EWTogXCJcIlxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX0h0dHBjYWxsU2VydmljZV8uYXBpKHBvc3REYXRhKTtcclxuICB9XHJcblxyXG4gIHNlYXJjaChkYXRhKSB7XHJcbiAgICB2YXIgcG9zdERhdGEgPSB7XHJcbiAgICAgIHNlcnZpY2VfTkFNRTogXCJMT0NBVElPTlwiLFxyXG4gICAgICByZXF1ZXN0X1RZUEU6IFwiUE9TVFwiLFxyXG4gICAgICByZXF1ZXN0X1VSSTogXCJsb2NhdGlvbi9zZWFyY2hcIixcclxuICAgICAgcmVxdWVzdF9CT0RZOiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9IdHRwY2FsbFNlcnZpY2VfLmFwaShwb3N0RGF0YSk7XHJcbiAgfVxyXG5cclxuICBzZWFyY2hBbGwoZGF0YSkge1xyXG4gICAgdmFyIHBvc3REYXRhID0ge1xyXG4gICAgICBzZXJ2aWNlX05BTUU6IFwiTE9DQVRJT05cIixcclxuICAgICAgcmVxdWVzdF9UWVBFOiBcIlBPU1RcIixcclxuICAgICAgcmVxdWVzdF9VUkk6IFwibG9jYXRpb24vc2VhcmNoL2FsbFwiLFxyXG4gICAgICByZXF1ZXN0X0JPRFk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fSHR0cGNhbGxTZXJ2aWNlXy5hcGkocG9zdERhdGEpO1xyXG4gIH1cclxuXHJcbiAgYWR2YW5jZWRTZWFyY2goZGF0YSkge1xyXG4gICAgdmFyIHBvc3REYXRhID0ge1xyXG4gICAgICBzZXJ2aWNlX05BTUU6IFwiTE9DQVRJT05cIixcclxuICAgICAgcmVxdWVzdF9UWVBFOiBcIlBPU1RcIixcclxuICAgICAgcmVxdWVzdF9VUkk6IFwibG9jYXRpb24vYWR2YW5jZWRzZWFyY2hcIixcclxuICAgICAgcmVxdWVzdF9CT0RZOiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX0h0dHBjYWxsU2VydmljZV8uYXBpKHBvc3REYXRhKTtcclxuICB9XHJcblxyXG4gIGFkdmFuY2VkU2VhcmNoQWxsKGRhdGEpIHtcclxuICAgIHZhciBwb3N0RGF0YSA9IHtcclxuICAgICAgc2VydmljZV9OQU1FOiBcIkxPQ0FUSU9OXCIsXHJcbiAgICAgIHJlcXVlc3RfVFlQRTogXCJQT1NUXCIsXHJcbiAgICAgIHJlcXVlc3RfVVJJOiBcImxvY2F0aW9uL2FkdmFuY2Vkc2VhcmNoL2FsbFwiLFxyXG4gICAgICByZXF1ZXN0X0JPRFk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fSHR0cGNhbGxTZXJ2aWNlXy5hcGkocG9zdERhdGEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxsRGV0YWlsKHJlc3BvbnNlKSB7XHJcbiAgICBmb3IgKHZhciBhID0gMDsgYSA8IHJlc3BvbnNlLmxlbmd0aDsgYSsrKSB7XHJcbiAgICAgIHJlc3BvbnNlW2FdLmxvY2F0aW9ubGV2ZWx0eXBlID0gcmVzcG9uc2VbYV0ubG9jYXRpb25sZXZlbHR5cGVfSUQuY29kZSArIFwiIC0gXCIgKyByZXNwb25zZVthXS5sb2NhdGlvbmxldmVsdHlwZV9JRC5kZXNjcmlwdGlvbjtcclxuICAgIH1cclxuICAgIHJldHVybihyZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBnZXREZXRhaWwocmVzcG9uc2UpIHtcclxuICAgIHJlc3BvbnNlLmxvY2F0aW9ubGV2ZWx0eXBlID0gcmVzcG9uc2UubG9jYXRpb25sZXZlbHR5cGVfSUQuY29kZSArIFwiIC0gXCIgKyByZXNwb25zZS5sb2NhdGlvbmxldmVsdHlwZV9JRC5kZXNjcmlwdGlvbjtcclxuICAgIGlmIChyZXNwb25zZS5pc2FjdGl2ZSA9PSBcIllcIikge1xyXG4gICAgICByZXNwb25zZS5pc2FjdGl2ZSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXNwb25zZS5pc2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuKHJlc3BvbnNlKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==