import { Injectable } from "@angular/core";
import { setting } from "../../setting";
import { HttpCallServieService } from "projects/locationlibrary/src/lib/services/http-call-service.service";
import * as i0 from "@angular/core";
import * as i1 from "../../services/http-call-service.service";
export class LocationService {
    constructor(_HttpCallServieService_) {
        this._HttpCallServieService_ = _HttpCallServieService_;
    }
    get() {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "GET",
            request_URI: "location",
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    getAll() {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "GET",
            request_URI: "location/all",
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    getOne(id) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "GET",
            request_URI: "location/" + id,
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    add(data) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "POST",
            request_URI: "location",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    update(data, id) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "PUT",
            request_URI: "location/" + id,
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    delete(id) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "DELETE",
            request_URI: "location/" + id,
            request_BODY: ""
        };
        return this._HttpCallServieService_.api(postData);
    }
    search(data) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "POST",
            request_URI: "location/search",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    searchAll(data) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "POST",
            request_URI: "location/search/all",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    advancedSearch(data) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "POST",
            request_URI: "location/advancedsearch",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    advancedSearchAll(data) {
        var postData = {
            service_NAME: setting.locationservice_NAME,
            request_TYPE: "POST",
            request_URI: "location/advancedsearch/all",
            request_BODY: JSON.stringify(data)
        };
        return this._HttpCallServieService_.api(postData);
    }
    getAllDetail(response) {
        for (var a = 0; a < response.length; a++) {
            response[a].locationleveltype = response[a].locationleveltype_ID.code + " - " + response[a].locationleveltype_ID.description;
        }
        return (response);
    }
    getDetail(response) {
        response.locationleveltype = response.locationleveltype_ID.code + " - " + response.locationleveltype_ID.description;
        if (response.isactive == "Y") {
            response.isactive = true;
        }
        else {
            response.isactive = false;
        }
        return (response);
    }
}
LocationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocationService_Factory() { return new LocationService(i0.ɵɵinject(i1.HttpCallServieService)); }, token: LocationService, providedIn: "root" });
LocationService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
LocationService.ctorParameters = () => [
    { type: HttpCallServieService }
];
//# sourceMappingURL=data:application/json;base64,