import { Injectable } from '@angular/core';
import { IconType } from './icon';
import { BootstrapIconsPack } from './pack/bootstrap-icons-pack';
import { FontAwesome4IconsPack } from './pack/font-awesome4-icons-pack';
import { FontAwesome5IconsPack } from './pack/font-awesome5-icons-pack';
import { MaterialIconsPack } from './pack/material-icons-pack';
export class IconPickerService {
    constructor() {
        this.bsIconPack = new BootstrapIconsPack();
        this.fa4IconsPack = new FontAwesome4IconsPack();
        this.fa5IconsPack = new FontAwesome5IconsPack();
        this.matIconsPack = new MaterialIconsPack();
    }
    getIcons(ipIconPacks) {
        let icons = [];
        ipIconPacks.forEach((ipIconPack) => {
            if (ipIconPack === 'fa' || ipIconPack === 'all') {
                const faIcons = this.fa4IconsPack.getIcons().map(icon => {
                    icon.type = IconType.FontAwesome;
                    return icon;
                });
                icons = icons.concat(faIcons);
            }
            if (ipIconPack === 'bs' || ipIconPack === 'all') {
                const bsIcons = this.bsIconPack.getIcons().map(icon => {
                    icon.type = IconType.Bootstrap;
                    return icon;
                });
                icons = icons.concat(bsIcons);
            }
            if (ipIconPack === 'fa5' || ipIconPack === 'all') {
                const fa5Icons = this.fa5IconsPack.getIcons().map(icon => {
                    icon.type = IconType.FontAwesome5;
                    return icon;
                });
                icons = icons.concat(fa5Icons);
            }
            if (ipIconPack === 'mat' || ipIconPack === 'all') {
                const matIcons = this.matIconsPack.getIcons().map(icon => {
                    icon.type = IconType.Material;
                    return icon;
                });
                icons = icons.concat(matIcons);
            }
        });
        return icons;
    }
}
IconPickerService.decorators = [
    { type: Injectable }
];
IconPickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYi9zcmMvbGliL2ljb24tcGlja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQU8sUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXRDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRzdELE1BQU0sT0FBTyxpQkFBaUI7SUFNNUI7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQUMzQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsUUFBUSxDQUFDLFdBQXFCO1FBQzVCLElBQUksS0FBSyxHQUFXLEVBQUUsQ0FBQztRQUN2QixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDakMsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7Z0JBQy9DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN0RCxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7b0JBQ2pDLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7Z0JBQy9DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNwRCxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7b0JBQy9CLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxVQUFVLEtBQUssS0FBSyxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7Z0JBQ2hELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN2RCxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7b0JBQ2xDLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2hDO1lBQ0QsSUFBSSxVQUFVLEtBQUssS0FBSyxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7Z0JBQ2hELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN2RCxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7b0JBQzlCLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2hDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQS9DRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtJY29uLCBJY29uVHlwZX0gZnJvbSAnLi9pY29uJztcclxuaW1wb3J0IHtJY29uc1BhY2t9IGZyb20gJy4vaWNvbnMtcGFjayc7XHJcbmltcG9ydCB7Qm9vdHN0cmFwSWNvbnNQYWNrfSBmcm9tICcuL3BhY2svYm9vdHN0cmFwLWljb25zLXBhY2snO1xyXG5pbXBvcnQge0ZvbnRBd2Vzb21lNEljb25zUGFja30gZnJvbSAnLi9wYWNrL2ZvbnQtYXdlc29tZTQtaWNvbnMtcGFjayc7XHJcbmltcG9ydCB7Rm9udEF3ZXNvbWU1SWNvbnNQYWNrfSBmcm9tICcuL3BhY2svZm9udC1hd2Vzb21lNS1pY29ucy1wYWNrJztcclxuaW1wb3J0IHtNYXRlcmlhbEljb25zUGFja30gZnJvbSAnLi9wYWNrL21hdGVyaWFsLWljb25zLXBhY2snO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSWNvblBpY2tlclNlcnZpY2Uge1xyXG4gIHByaXZhdGUgYnNJY29uUGFjazogSWNvbnNQYWNrO1xyXG4gIHByaXZhdGUgZmE0SWNvbnNQYWNrOiBJY29uc1BhY2s7XHJcbiAgcHJpdmF0ZSBmYTVJY29uc1BhY2s6IEljb25zUGFjaztcclxuICBwcml2YXRlIG1hdEljb25zUGFjazogSWNvbnNQYWNrO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYnNJY29uUGFjayA9IG5ldyBCb290c3RyYXBJY29uc1BhY2soKTtcclxuICAgIHRoaXMuZmE0SWNvbnNQYWNrID0gbmV3IEZvbnRBd2Vzb21lNEljb25zUGFjaygpO1xyXG4gICAgdGhpcy5mYTVJY29uc1BhY2sgPSBuZXcgRm9udEF3ZXNvbWU1SWNvbnNQYWNrKCk7XHJcbiAgICB0aGlzLm1hdEljb25zUGFjayA9IG5ldyBNYXRlcmlhbEljb25zUGFjaygpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWNvbnMoaXBJY29uUGFja3M6IHN0cmluZ1tdKTogSWNvbltdIHtcclxuICAgIGxldCBpY29uczogSWNvbltdID0gW107XHJcbiAgICBpcEljb25QYWNrcy5mb3JFYWNoKChpcEljb25QYWNrKSA9PiB7XHJcbiAgICAgIGlmIChpcEljb25QYWNrID09PSAnZmEnIHx8IGlwSWNvblBhY2sgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgY29uc3QgZmFJY29ucyA9IHRoaXMuZmE0SWNvbnNQYWNrLmdldEljb25zKCkubWFwKGljb24gPT4ge1xyXG4gICAgICAgICAgaWNvbi50eXBlID0gSWNvblR5cGUuRm9udEF3ZXNvbWU7XHJcbiAgICAgICAgICByZXR1cm4gaWNvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpY29ucyA9IGljb25zLmNvbmNhdChmYUljb25zKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXBJY29uUGFjayA9PT0gJ2JzJyB8fCBpcEljb25QYWNrID09PSAnYWxsJykge1xyXG4gICAgICAgIGNvbnN0IGJzSWNvbnMgPSB0aGlzLmJzSWNvblBhY2suZ2V0SWNvbnMoKS5tYXAoaWNvbiA9PiB7XHJcbiAgICAgICAgICBpY29uLnR5cGUgPSBJY29uVHlwZS5Cb290c3RyYXA7XHJcbiAgICAgICAgICByZXR1cm4gaWNvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpY29ucyA9IGljb25zLmNvbmNhdChic0ljb25zKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXBJY29uUGFjayA9PT0gJ2ZhNScgfHwgaXBJY29uUGFjayA9PT0gJ2FsbCcpIHtcclxuICAgICAgICBjb25zdCBmYTVJY29ucyA9IHRoaXMuZmE1SWNvbnNQYWNrLmdldEljb25zKCkubWFwKGljb24gPT4ge1xyXG4gICAgICAgICAgaWNvbi50eXBlID0gSWNvblR5cGUuRm9udEF3ZXNvbWU1O1xyXG4gICAgICAgICAgcmV0dXJuIGljb247XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWNvbnMgPSBpY29ucy5jb25jYXQoZmE1SWNvbnMpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpcEljb25QYWNrID09PSAnbWF0JyB8fCBpcEljb25QYWNrID09PSAnYWxsJykge1xyXG4gICAgICAgIGNvbnN0IG1hdEljb25zID0gdGhpcy5tYXRJY29uc1BhY2suZ2V0SWNvbnMoKS5tYXAoaWNvbiA9PiB7XHJcbiAgICAgICAgICBpY29uLnR5cGUgPSBJY29uVHlwZS5NYXRlcmlhbDtcclxuICAgICAgICAgIHJldHVybiBpY29uO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGljb25zID0gaWNvbnMuY29uY2F0KG1hdEljb25zKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaWNvbnM7XHJcbiAgfVxyXG59XHJcbiJdfQ==