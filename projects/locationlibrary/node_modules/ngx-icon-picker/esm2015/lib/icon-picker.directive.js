import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Input, Output, ReflectiveInjector, ViewContainerRef } from '@angular/core';
import { IconPickerComponent } from './icon-picker.component';
export class IconPickerDirective {
    constructor(vcRef, el, cfr) {
        this.vcRef = vcRef;
        this.el = el;
        this.cfr = cfr;
        this.ipPlaceHolder = 'Search icon...';
        this.ipPosition = 'right';
        this.ipFallbackIcon = 'fas fa-user';
        this.ipHeight = 'auto';
        this.ipMaxHeight = '200px';
        this.ipWidth = '230px';
        this.ipIconSize = '16px';
        this.ipIconVerticalPadding = '6px'; // Top / Bottom
        this.ipIconHorizontalPadding = '10px'; // Left / Right
        this.ipIconPack = ['bs', 'fa5'];
        this.ipKeepSearchFilter = 'false';
        // Default design with bootstrap
        this.ipButtonStyleClass = 'btn btn-default';
        this.ipDivSearchStyleClass = '';
        this.ipInputSearchStyleClass = 'form-control input-sm';
        this.iconPickerSelect = new EventEmitter(true);
        this.ignoreChanges = false;
        this.created = false;
    }
    ngOnChanges(changes) {
        if (changes.iconPicker) {
            this.ignoreChanges = false;
        }
    }
    ngOnInit() {
        this.iconPicker = this.iconPicker || this.ipFallbackIcon || 'fa fa-user-plus';
        this.iconPickerSelect.emit(this.iconPicker);
    }
    onClick() {
        this.openDialog();
    }
    openDialog() {
        if (!this.created) {
            this.created = true;
            const vcRef = this.vcRef;
            const compFactory = this.cfr.resolveComponentFactory(IconPickerComponent);
            // eslint-disable-next-line import/no-deprecated
            const injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);
            const cmpRef = vcRef.createComponent(compFactory, 0, injector, []);
            cmpRef.instance.setDialog(this, this.el, this.iconPicker, this.ipPosition, this.ipHeight, this.ipMaxHeight, this.ipWidth, this.ipPlaceHolder, this.ipFallbackIcon, this.ipIconPack, this.ipIconSize, this.ipIconVerticalPadding, this.ipIconHorizontalPadding, this.ipButtonStyleClass, this.ipDivSearchStyleClass, this.ipInputSearchStyleClass, this.ipKeepSearchFilter);
            this.dialog = cmpRef.instance;
            if (this.vcRef !== vcRef) {
                cmpRef.changeDetectorRef.detectChanges();
            }
        }
        else if (this.dialog) {
            this.dialog.openDialog(this.iconPicker);
        }
    }
    iconSelected(icon) {
        this.iconPickerSelect.emit(icon);
    }
}
IconPickerDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[iconPicker]',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '(click)': 'onClick()'
                }
            },] }
];
IconPickerDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: ComponentFactoryResolver }
];
IconPickerDirective.propDecorators = {
    iconPicker: [{ type: Input }],
    ipPlaceHolder: [{ type: Input }],
    ipPosition: [{ type: Input }],
    ipFallbackIcon: [{ type: Input }],
    ipHeight: [{ type: Input }],
    ipMaxHeight: [{ type: Input }],
    ipWidth: [{ type: Input }],
    ipIconSize: [{ type: Input }],
    ipIconVerticalPadding: [{ type: Input }],
    ipIconHorizontalPadding: [{ type: Input }],
    ipIconPack: [{ type: Input }],
    ipKeepSearchFilter: [{ type: Input }],
    ipButtonStyleClass: [{ type: Input }],
    ipDivSearchStyleClass: [{ type: Input }],
    ipInputSearchStyleClass: [{ type: Input }],
    iconPickerSelect: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1waWNrZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9saWIvaWNvbi1waWNrZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sRUFDTixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBVTVELE1BQU0sT0FBTyxtQkFBbUI7SUF3QjlCLFlBQ1UsS0FBdUIsRUFDdkIsRUFBYyxFQUNkLEdBQTZCO1FBRjdCLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQXpCOUIsa0JBQWEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxlQUFVLEdBQUcsT0FBTyxDQUFDO1FBQ3JCLG1CQUFjLEdBQUcsYUFBYSxDQUFDO1FBQy9CLGFBQVEsR0FBRyxNQUFNLENBQUM7UUFDbEIsZ0JBQVcsR0FBRyxPQUFPLENBQUM7UUFDdEIsWUFBTyxHQUFHLE9BQU8sQ0FBQztRQUNsQixlQUFVLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLDBCQUFxQixHQUFHLEtBQUssQ0FBQyxDQUFDLGVBQWU7UUFDOUMsNEJBQXVCLEdBQUcsTUFBTSxDQUFDLENBQUMsZUFBZTtRQUNqRCxlQUFVLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0IsdUJBQWtCLEdBQUcsT0FBTyxDQUFDO1FBQ3RDLGdDQUFnQztRQUN2Qix1QkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztRQUN2QywwQkFBcUIsR0FBRyxFQUFFLENBQUM7UUFDM0IsNEJBQXVCLEdBQUcsdUJBQXVCLENB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QUNMLEtBQUs7aUNBQ0wsS0FBSztpQ0FFTCxLQUFLO29DQUNMLEtBQUs7c0NBQ0wsS0FBSzsrQkFFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgRGlyZWN0aXZlLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIElucHV0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBPbkluaXQsXHJcbiAgT3V0cHV0LFxyXG4gIFJlZmxlY3RpdmVJbmplY3RvcixcclxuICBWaWV3Q29udGFpbmVyUmVmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQge0ljb25QaWNrZXJDb21wb25lbnR9IGZyb20gJy4vaWNvbi1waWNrZXIuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdbaWNvblBpY2tlcl0nLFxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxyXG4gIGhvc3Q6IHtcclxuICAgICcoY2xpY2spJzogJ29uQ2xpY2soKSdcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJY29uUGlja2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGljb25QaWNrZXI6IHN0cmluZztcclxuICBASW5wdXQoKSBpcFBsYWNlSG9sZGVyID0gJ1NlYXJjaCBpY29uLi4uJztcclxuICBASW5wdXQoKSBpcFBvc2l0aW9uID0gJ3JpZ2h0JztcclxuICBASW5wdXQoKSBpcEZhbGxiYWNrSWNvbiA9ICdmYXMgZmEtdXNlcic7XHJcbiAgQElucHV0KCkgaXBIZWlnaHQgPSAnYXV0byc7XHJcbiAgQElucHV0KCkgaXBNYXhIZWlnaHQgPSAnMjAwcHgnO1xyXG4gIEBJbnB1dCgpIGlwV2lkdGggPSAnMjMwcHgnO1xyXG4gIEBJbnB1dCgpIGlwSWNvblNpemUgPSAnMTZweCc7XHJcbiAgQElucHV0KCkgaXBJY29uVmVydGljYWxQYWRkaW5nID0gJzZweCc7IC8vIFRvcCAvIEJvdHRvbVxyXG4gIEBJbnB1dCgpIGlwSWNvbkhvcml6b250YWxQYWRkaW5nID0gJzEwcHgnOyAvLyBMZWZ0IC8gUmlnaHRcclxuICBASW5wdXQoKSBpcEljb25QYWNrID0gWydicycsICdmYTUnXTtcclxuICBASW5wdXQoKSBpcEtlZXBTZWFyY2hGaWx0ZXIgPSAnZmFsc2UnO1xyXG4gIC8vIERlZmF1bHQgZGVzaWduIHdpdGggYm9vdHN0cmFwXHJcbiAgQElucHV0KCkgaXBCdXR0b25TdHlsZUNsYXNzID0gJ2J0biBidG4tZGVmYXVsdCc7XHJcbiAgQElucHV0KCkgaXBEaXZTZWFyY2hTdHlsZUNsYXNzID0gJyc7XHJcbiAgQElucHV0KCkgaXBJbnB1dFNlYXJjaFN0eWxlQ2xhc3MgPSAnZm9ybS1jb250cm9sIGlucHV0LXNtJztcclxuXHJcbiAgQE91dHB1dCgpIGljb25QaWNrZXJTZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4odHJ1ZSk7XHJcblxyXG4gIHByaXZhdGUgZGlhbG9nOiBhbnk7XHJcbiAgcHJpdmF0ZSBjcmVhdGVkOiBib29sZWFuO1xyXG4gIHByaXZhdGUgaWdub3JlQ2hhbmdlcyA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xyXG4gICAgdGhpcy5jcmVhdGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkIHtcclxuICAgIGlmIChjaGFuZ2VzLmljb25QaWNrZXIpIHtcclxuICAgICAgdGhpcy5pZ25vcmVDaGFuZ2VzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuaWNvblBpY2tlciA9IHRoaXMuaWNvblBpY2tlciB8fCB0aGlzLmlwRmFsbGJhY2tJY29uIHx8ICdmYSBmYS11c2VyLXBsdXMnO1xyXG4gICAgdGhpcy5pY29uUGlja2VyU2VsZWN0LmVtaXQodGhpcy5pY29uUGlja2VyKTtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2soKSB7XHJcbiAgICB0aGlzLm9wZW5EaWFsb2coKTtcclxuICB9XHJcblxyXG4gIG9wZW5EaWFsb2coKSB7XHJcbiAgICBpZiAoIXRoaXMuY3JlYXRlZCkge1xyXG4gICAgICB0aGlzLmNyZWF0ZWQgPSB0cnVlO1xyXG4gICAgICBjb25zdCB2Y1JlZiA9IHRoaXMudmNSZWY7XHJcbiAgICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoSWNvblBpY2tlckNvbXBvbmVudCk7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVwcmVjYXRlZFxyXG4gICAgICBjb25zdCBpbmplY3RvciA9IFJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMoW10sIHZjUmVmLnBhcmVudEluamVjdG9yKTtcclxuICAgICAgY29uc3QgY21wUmVmID0gdmNSZWYuY3JlYXRlQ29tcG9uZW50KGNvbXBGYWN0b3J5LCAwLCBpbmplY3RvciwgW10pO1xyXG4gICAgICBjbXBSZWYuaW5zdGFuY2Uuc2V0RGlhbG9nKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWNvblBpY2tlciwgdGhpcy5pcFBvc2l0aW9uLCB0aGlzLmlwSGVpZ2h0LCB0aGlzLmlwTWF4SGVpZ2h0LFxyXG4gICAgICAgIHRoaXMuaXBXaWR0aCwgdGhpcy5pcFBsYWNlSG9sZGVyLCB0aGlzLmlwRmFsbGJhY2tJY29uLCB0aGlzLmlwSWNvblBhY2ssIHRoaXMuaXBJY29uU2l6ZSxcclxuICAgICAgICB0aGlzLmlwSWNvblZlcnRpY2FsUGFkZGluZywgdGhpcy5pcEljb25Ib3Jpem9udGFsUGFkZGluZywgdGhpcy5pcEJ1dHRvblN0eWxlQ2xhc3MsIHRoaXMuaXBEaXZTZWFyY2hTdHlsZUNsYXNzLFxyXG4gICAgICAgIHRoaXMuaXBJbnB1dFNlYXJjaFN0eWxlQ2xhc3MsIHRoaXMuaXBLZWVwU2VhcmNoRmlsdGVyKTtcclxuICAgICAgdGhpcy5kaWFsb2cgPSBjbXBSZWYuaW5zdGFuY2U7XHJcblxyXG4gICAgICBpZiAodGhpcy52Y1JlZiAhPT0gdmNSZWYpIHtcclxuICAgICAgICBjbXBSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGlhbG9nKSB7XHJcbiAgICAgIHRoaXMuZGlhbG9nLm9wZW5EaWFsb2codGhpcy5pY29uUGlja2VyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGljb25TZWxlY3RlZChpY29uOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuaWNvblBpY2tlclNlbGVjdC5lbWl0KGljb24pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19